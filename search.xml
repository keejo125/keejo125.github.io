<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx与tornado框架的并发评测]]></title>
    <url>%2FNginx%E4%B8%8Etornado%E6%A1%86%E6%9E%B6%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AF%84%E6%B5%8B.html</url>
    <content type="text"><![CDATA[背景分别测试在windows平台和linux平台(SuSE)下，tornado框架的并发效果，以及通过配置nginx对并发效果影响。 操作系统： windows: Windows Server 2008 SP2 （8C8G) linux: SuSE12 SP3 （8C8G) 并发测试工具：tsung 测试访问：仅返回”Hello World”字符 评测过程1、直接访问tornado，并发设置为500 windows Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 36.11 msec 32.51 msec 620.3 / sec 138.53 / sec 33.18 msec 44464 page 0.11 sec 33.02 msec 1221.1 / sec 272.69 / sec 76.98 msec 87507 request 0.11 sec 33.02 msec 1221.1 / sec 272.69 / sec 76.98 msec 87507 session 1mn 56sec 8.66 sec 14.8 / sec 1.66 / sec 12.64 sec 498 Code Highest Rate Mean Rate Total number 200 616 / sec 138.70 / sec 44536 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 error_abort_max_conn_retries 4.7 / sec 104 error_abort_max_send_retries 13.9 / sec 394 error_connect_econnrefused 35.8 / sec 581 error_connection_closed 35.7 / sec 1023 liunx Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 0.21 sec 30.57 msec 760 / sec 127.01 / sec 34.44 msec 41788 page 0.21 sec 30.97 msec 1474.9 / sec 247.78 / sec 39.04 msec 81576 request 0.21 sec 30.97 msec 1474.9 / sec 247.78 / sec 39.04 msec 81576 session 2mn 43sec 3.33 sec 11.9 / sec 1.66 / sec 5.48 sec 498 Code Highest Rate Mean Rate Total number 200 762.6 / sec 127.15 / sec 41867 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 error_abort_max_send_retries 11.9 / sec 498 error_connection_closed 38.4 / sec 1500 说明 在500的并发量下，无论在windows还是liunx平台，均有较多的连接错误。但框架系统还是比较稳定的，没有出现崩溃等情况。 2 、通过Nginx代理访问，并发设置为500 windows Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 0.18 sec 31.78 msec 2287.5 / sec 588.11 / sec 0.11 sec 179083 page 0.58 sec 0.17 sec 2283.4 / sec 587.32 / sec 0.36 sec 178778 request 0.58 sec 0.17 sec 2283.4 / sec 587.32 / sec 0.36 sec 178778 Code Highest Rate Mean Rate Total number 200 1736.4 / sec 307.54 / sec 94844 502 1122.9 / sec 280.16 / sec 84048 Name Highest Rate Total number error_abort 0.5 / sec 1 liunx Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 0.17 sec 32.16 msec 801 / sec 710.33 / sec 73.15 msec 216931 page 0.69 sec 0.16 sec 798 / sec 709.48 / sec 0.58 sec 216633 request 0.69 sec 0.16 sec 798 / sec 709.48 / sec 0.58 sec 216633 Code Highest Rate Mean Rate Total number 200 794.9 / sec 709.79 / sec 216726 504 0.7 / sec 0.04 / sec 11 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 说明 增加Nginx做反向代理之后，有效的提供了一定的缓冲。在windows平台下出现较多的code 502，说明后台没有及时返回，导致Nginx直接返回给压测工具code 502。在linux平台下就比较稳定了。 3、通过Nginx代理访问，后端设置4台服务器，并发设置为1000 windows Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 0.20 sec 35.78 msec 4122.2 / sec 508.31 / sec 0.12 sec 156715 page 0.48 sec 74.59 msec 4109.8 / sec 506.99 / sec 0.28 sec 156275 request 0.48 sec 74.59 msec 4109.8 / sec 506.99 / sec 0.28 sec 156275 Code Highest Rate Mean Rate Total number 200 4115.6 / sec 507.68 / sec 156481 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 liunx Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 0.21 sec 36.22 msec 4786.7 / sec 533.37 / sec 0.12 sec 163256 page 0.50 sec 73.71 msec 4784.9 / sec 532.57 / sec 0.29 sec 162988 request 0.50 sec 73.71 msec 4784.9 / sec 532.57 / sec 0.29 sec 162988 Code Highest Rate Mean Rate Total number 200 4792.2 / sec 533.28 / sec 163199 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 说明 由于后台扩充到了4台服务器，通过Nginx进行轮询访问，分散了压力。在1000的并发下，windows和suse平台表现不相上下，均无错误。 4、通过Nginx代理访问，后端设置4台服务器，并发设置为1500 windows Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 0.19 sec 32.09 msec 2576 / sec 1075.47 / sec 0.10 sec 327195 page 0.50 sec 71.39 msec 2602.4 / sec 1073.57 / sec 0.31 sec 326577 request 0.50 sec 71.39 msec 2602.4 / sec 1073.57 / sec 0.31 sec 326577 Code Highest Rate Mean Rate Total number 200 2502.1 / sec 1001.18 / sec 304862 502 770.7 / sec 84.82 / sec 22052 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 liunx Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 0.20 sec 33.41 msec 3275.7 / sec 990.22 / sec 0.11 sec 299354 page 0.48 sec 68.46 msec 3270.3 / sec 988.43 / sec 0.27 sec 298777 request 0.48 sec 68.46 msec 3270.3 / sec 988.43 / sec 0.27 sec 298777 Code Highest Rate Mean Rate Total number 200 3261.5 / sec 989.09 / sec 298975 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 说明 当并发增加到1500时，windows平台出现code 502，后端服务器出现瓶颈。linux平台表现稳定。 5、通过Nginx代理访问，后端设置4台服务器，并发设置为2000 liunx Name highest 10sec mean lowest 10sec mean Highest Rate Mean Rate Mean Count connect 19.30 sec 36.06 msec 2187.66666666667 / sec 611.56 / sec 0.48 sec 166002 page 19.36 sec 0.14 sec 2197 / sec 611.42 / sec 0.57 sec 165828 request 19.36 sec 0.14 sec 2197 / sec 611.42 / sec 0.57 sec 165828 Code Highest Rate Mean Rate Total number 200 2194.66666666667 / sec 611.54 / sec 172473 Name Highest Rate Total number error_abort 0.333333333333333 / sec 1 error_connect_etimedout 17.1 / sec 318 error_next_session 0.285714285714286 / sec 2 说明 在2000并发先，linux平台后端依旧稳定返回code 200，但是Nginx会直接返回error，瓶颈出现在Nginx，需要调整相关配置了。 结论这次测试中可以发现，当仅返回字符串Hello World时，无论是windows平台还是liunx平台，在并发500的情况下虽然框架可以稳定输出，但是会出现不同程度的系统处理不过来直接拒绝请求的情况。 通过增加Nginx，可以有效的为后端提供缓冲，同样500的并发下，liunx平台返回给Nginx的错误code 504要明显比windows平台code 502少很多。 通过增加后台服务器，使用Nginx进行轮询，可以增加并发，在后端4台服务器，1000的并发下，linux平台和windows平台表现不相上下。但并发增加到1500之后，windows平台开始出现大量的code 502错误，linux平台依旧稳定。把并发继续增加到2000，Nginx端出现瓶颈，返回连接错误，后端linux保持稳定。可考虑下通过调整Nginx配置或者增加Nginx来继续提升并发效果。 不过，从上述测试情况来看，torando框架还是很稳定的，不至于并高并发弄到崩溃的程度。]]></content>
      <categories>
        <category>中间件</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>SuSE</tag>
        <tag>windows</tag>
        <tag>高并发</tag>
        <tag>torando</tag>
        <tag>Nginx</tag>
        <tag>tsung</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SuSE缺失devel包的问题]]></title>
    <url>%2FSuSE%E7%BC%BA%E5%A4%B1devel%E5%8C%85%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[背景最近几天计划将原Python项目迁移到Liunx服务器上，操作系统是SuSE 12 SP3。原以为Python项目迁移会比较方面，使用pip安装requirements包就好了，结果遇到不少问题。 问题 安装mysqlclient包时，出现了如下报错： 12345678910creating build/temp.linux-x86_64-2.7gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Dversion_info=(1,3,9,'final',1) -D__version__=1.3.9 -I/usr/include/mysql -I/usr/local/python/include/python2.7 -c _mysql.c -o build/temp.linux-x86_64-2.7/_mysql.o -m64 _mysql.c:29:23: fatal error: my_config.h: No such file or directory #include "my_config.h" ^ compilation terminated. error: command 'gcc' failed with exit status 1 ----------------------------------------Command "/home/sysop/webapp/hzinfo/venv/bin/python -u -c "import setuptools, tokenize;__file__='/tmp/pip-install-4FRt1w/mysqlclient/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))" install --record /tmp/pip-record-AgHBn8/install-record.txt --single-version-externally-managed --compile --install-headers /home/sysop/webapp/hzinfo/venv/include/site/python2.7/mysqlclient" failed with error code 1 in /tmp/pip-install-4FRt1w/mysqlclient/ 安装ldap库时，出现了如下报错： 123456In file included from Modules/LDAPObject.c:9:0:Modules/errors.h:8:18: fatal error: lber.h: No such file or directory #include "lber.h" ^compilation terminated.error: command 'gcc' failed with exit status 1 思路这些错乍看不一样，其实差不多，都是缺失了一些东西，导致安装失败。针对每个问题逐个谷歌百度就会发现，大家会告诉你需要安装对应的开发库及xxx-dev(el)包。 比如上面第一个问题里，安装mysqlclient包报错了，需要安装对应的dev包，在SuSE中是libmysqlclient-devel。 xxx与xxx-dev(el)的关系经过这两天的查询和总结，再Liunx中，一般会把软件拆分为两部分，一部分是直接使用的库即xxx，另一部分就是开发用的库，包含一些头文件之类的，就是xx-dev(el)。 差不多可以这样理解：当你只是使用某个软件的时候，你只要安装xxx即可，但当你需要二次开发或者使用对应的一些插件的时候，很可能你就会需要再安装xxx-dev(el)了。 https://blog.csdn.net/wangeen/article/details/14522227 解决办法知道了问题的原因，那么解决办法就简单了。但是对于SuSE，尤其是没有外网的SuSE就不是了。 SuSE是收费的系统，没办法直接下载到对应的rpm安装包，需要挂载对应系统版本的SDK光盘。而问题是不断暴露和修复的，我们需要的dev包可能在最初获取的SDK光盘里不存在。查看了SuSE官网，有些补丁也是建议通过网络更新的，或者直接下载更新SDK安装盘。 https://www.suse.com/zh-cn/documentation/sles-12/book_sle_deployment/data/sec_add-ons_sdk.html 不过官网下载是相当的慢。。。 zypper的使用zypper是SuSE的当我们有了对应的sdk光盘或者目录之后，可以通过nfs的方式挂载到zypper源中。 添加源 123zypper ar -t yast2 -n 'sles12sp3_sdk1' -fc nfs://122.16.125.112/iso/sles12sp3_sdk1 sles12sp3_sdk1zypper ar -t yast2 -n 'sles12sp3_sdk2' -fc nfs://122.64.29.85/approot1/sles12sp3_sdk sles12sp3_sdk2zypper ar -t yast2 -n 'sles12sp3_server' -fc fs://122.64.29.85/approot1/sles12sp3_server sles12sp3_server 搜索需要的安装包 当遇到上述问题中的安装失败，使用如下的命令搜索下有哪些包可以安装： 1zypper se mysql 显示结果如下： 安装对应的包 这里可以看到libmysqlclient-devel没有安装（前面有i标记的即为已经安装），安装即可。 1~ # zypper install libmysqlclient-devel 搜索安装其他devel包 同理，在第二个问题中，我们搜索ldap，就会发现可以libldapcpp-devel包没有安装。 装好之后继续安装python-ldap还会遇到一个错误： 12345Modules/LDAPObject.c:18:18: fatal error: sasl.h: No such file or directory #include &lt;sasl.h&gt; ^compilation terminated.error: command 'gcc' failed with exit status 1 同理，再搜一下： 发现cyrus-sasl-devel包没装，也把装上，问题就解决了。 注意python也是有python-devel包的，这个不要忘了。]]></content>
      <categories>
        <category>操作系统</category>
        <category>SuSE</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SuSE</tag>
        <tag>python</tag>
        <tag>zypper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的安装]]></title>
    <url>%2FMySQL%E7%9A%84%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[背景每次重搭环境都免不了要重新安装数据库，虽然频率不高，也发现竟然在3个平台上都装过了，记录一下。 Windows安装MySQL 下载MySql：http://dev.mysql.com/downloads/mysql/ 解压后放到安装目录 在环境变量中将mysql安装目录定义为%MYSQL_HOME%，并将bin目录加入环境变量（%MYSQL_HOME%\bin） 在mysql-5.6.24-winx64的根目录下，找到my-default.ini文件，改名为my.ini 。打开，添加如下信息： 123456789[mysqld]loose-default-character-set = utf8character-set-server = utf8basedir = D:\mysql-5.6.24-winx64 #写自己的mysql路径哦datadir = D:\mysql-5.6.24-winx64\data #写自己的mysql路径哦！[client]loose-default-character-set = utf8[WinMySQLadmin]Server = D:\mysql-5.6.24-winx64\bin\mysqld.exe # 写自己的mysql路径哟！ 以管理员身份运行cmd，进入到%MYSQL_HOME%到bin目录下运行如下命令： 12mysqld --initialize -insecure # 初始化mysql，创建root用户，密码为空mysqld -install 最后提示：Service successfully in installed! 启动mysql。 1net start mysql 停止mysql 1net stop mysql 首次登陆，无需密码 1mysql -u root 修改root密码 1mysql&gt; set password for root@localhost = password(&apos;root&apos;); 再次登陆 1mysql -u root -p 会提示输入密码，输入后已root用户进入。 其他命令 停止mysql 1net stop mysql 卸载服务 1mysqld -remove MAC下安装Mysql 下载Mac版的DMG Archive包。（不建议用brew安装，后续配置很麻烦） 后双击安装，一路下一步 会出现一个提醒，给了个默认root@localhost账号的密码。比如：root@localhost: wuKgf_mCK38z 安装完成后，在系统偏好设置中找到MySQL图标，点击进入，手动启动MySQL服务。 通过alias绑定命令：在命令行中运行如下命令，绑定mysql 12MacBook-Air:~ icbc$ alias mysql=/usr/local/mysql/bin/mysqlMacBook-Air:~ icbc$ alias mysqladmin=/usr/local/mysql/bin/mysqladmin ​ 注意：这种方式只能在当前命令行中有效。 建议是在环境变量中增加： 123456cd ~touch .bash_profilevi .bash_profile# 加入如下语句export PATH=$&#123;PATH&#125;:/usr/local/mysql/bin 进行root密码重置，比如重置为root，运行如下命令，然后输入临时密码即可。 12MacBook-Air:~ icbc$ mysqladmin -u root -p password rootEnter password: Suse下离线安装MySQL 先下载Suse版本的RPM包，官网有很多，要下载Bundle版，否则得分别下载各个组件。 SUSE Linux Enterprise Server 12 (x86, 64-bit), RPM Bundle 解压安装包 12345HzTomcat:/data # tar -xvf mysql-8.0.13-1.sles12.x86_64.rpm-bundle.tarHzTomcat:/data # cd mysql-8.0.13-1.sles12.x86_64/HzTomcat:/data/mysql-8.0.13-1.sles12.x86_64 # lsmysql-community-client-8.0.13-1.sles12.x86_64.rpm mysql-community-devel-8.0.13-1.sles12.x86_64.rpm mysql-community-server-8.0.13-1.sles12.x86_64.rpmmysql-community-common-8.0.13-1.sles12.x86_64.rpm mysql-community-libs-8.0.13-1.sles12.x86_64.rpm mysql-community-test-8.0.13-1.sles12.x86_64.rpm 下面的安装要注意按顺序，先安装mysql-community-common-8.0.13-1.sles12.x86_64.rpm 12345HzTomcat:/data/mysql-8.0.13-1.sles12.x86_64 # rpm -ivh mysql-community-common-8.0.13-1.sles12.x86_64.rpm warning: mysql-community-common-8.0.13-1.sles12.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%]Updating / installing... 1:mysql-community-common-8.0.13-1.s################################# [100%] 再安装mysql-community-libs-8.0.13-1.sles12.x86_64.rpm 12345HzTomcat:/data/mysql-8.0.13-1.sles12.x86_64 # rpm -ivh mysql-community-libs-8.0.13-1.sles12.x86_64.rpm warning: mysql-community-libs-8.0.13-1.sles12.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%]Updating / installing... 1:mysql-community-libs-8.0.13-1.sle################################# [100%] 再安装mysql-community-client-8.0.13-1.sles12.x86_64.rpm 12345HzTomcat:/data/mysql-8.0.13-1.sles12.x86_64 # rpm -ivh mysql-community-client-8.0.13-1.sles12.x86_64.rpm warning: mysql-community-client-8.0.13-1.sles12.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%]Updating / installing... 1:mysql-community-client-8.0.13-1.s################################# [100%] 最后安装mysql-community-server-8.0.13-1.sles12.x86_64.rpm 12345HzTomcat:/data/mysql-8.0.13-1.sles12.x86_64 # rpm -ivh mysql-community-server-8.0.13-1.sles12.x86_64.rpm warning: mysql-community-server-8.0.13-1.sles12.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%]Updating / installing... 1:mysql-community-server-8.0.13-1.s################################# [100%] 启动 1HzTomcat:~ # service mysql start 查看临时root密码 12HzTomcat:~ # grep 'temporary password' /var/log/mysql/mysqld.log 2019-01-09T07:16:31.105387Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: !kwpeD_Pc7/p 修改root密码 12345678910111213141516171819202122HzTomcat:~ # mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 8Server version: 8.0.13Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; alter user 'root'@'localhost' IDENTIFIED BY 'Password123!';Query OK, 0 rows affected (0.14 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.07 sec)mysql&gt; exitBye 可能出现的问题问题在修改root密码时，忘了flush privileges，然后导致新旧密码都无法登陆的问题。 123HzTomcat:~ # mysql -uroot -pEnter password: ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES) 解决方法 修改mysql的配置文件： 1HzTomcat:~ # vim /etc/my.cnf 增加：skip-grant-tables 然后在登陆直接使用root登陆，重新设置密码，即可。 12345678910111213141516171819202122232425262728293031HzTomcat:/var/lib/mysql # mysql -uroot Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 7Server version: 8.0.13 MySQL Community Server - GPLCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; flush privileges;Query OK, 0 rows affected (0.02 sec)mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;Password123!&apos;;Query OK, 0 rows affected (0.07 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.07 sec)mysql&gt; exitByeHzTomcat:/var/lib/mysql # vim /etc/my.cnfHzTomcat:/var/lib/mysql # service mysql restartHzTomcat:/var/lib/mysql # mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 8Server version: 8.0.13 MySQL Community Server - GPL]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flask - sqlalchemy.orm.exc.DetachedInstanceError]]></title>
    <url>%2Fflask-sqlalchemy-orm-exc-DetachedInstanceError.html</url>
    <content type="text"><![CDATA[背景在一个基于Flask的项目中，使用到flask-sqlachemy的数据库orm工具。在一次数据插入之后再次查询数据时出现了如下的错误： 1DetachedInstanceError: Instance &lt;User at 0x7f2f54fc8750&gt; is not bound to a Session; attribute refresh operation cannot proceed 原因经查，由于之前开发的时候，参考《Flask Web开发 基于Python的Web应用开发实战》这本书时，作者建议在配置flask-sqlachemy时，加入如下配置： 1SQLALCHEMY_COMMIT_ON_TEARDOWN = Ture 这个配置是用来涉及在db操作时，自动提交的。以下两种情况是等效的。123456# SQLALCHEMY_COMMIT_ON_TEARDOWN = True 时db.add(User)# SQLALCHEMY_COMMIT_ON_TEARDOWN = False 时db.add(User)db.commit() 但其实自动提交时，系统会一并删除当前数据库的session，所以导致了上面出现的问题。目前flask-sqlachemy官方也认为这个设置可能存在问题，已经在文档中移除了。 http://flask-sqlalchemy.pocoo.org/2.3/changelog/ 结论那么建议的方法就是删除这条配置，手动提交了。在每次进行数据库新增、修改、删除时，手动的commit()。]]></content>
      <categories>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>sqlachemy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Navcat连MySQL提示Autentication错误]]></title>
    <url>%2FNavicat%E8%BF%9EMySQL%E6%8F%90%E7%A4%BAAutentication%E9%94%99%E8%AF%AF.html</url>
    <content type="text"><![CDATA[背景Mysql版本：8.0.13 Navicat版本：Navicat Premium Version 12 问题在MySQL中创建好用户，数据库，并将数据库的权限授权给用户之后 1234567891011mysql&gt; create user 'flask'@'%' identified by 'xxxx';Query OK, 0 rows affected (0.01 sec)mysql&gt; create database FlaskDB default charset utf8 collate utf8_general_ci;Query OK, 1 row affected (0.00 sec)mysql&gt; grant all privileges on FlaskDB.* to "flask"@"%"; Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) 然后通过Navicat使用连接数据库，出现了下面的报错： 结论这个问题百度一下有很多帖子，是由于新版的MySQL8更新了认证方式，而其他的数据库软件没有跟上。大部分忒子会推荐我们重新配置MySQL，不启用新的认证方式，甚至有些建议删了重装。 个人还是推荐下面这种方式： 1ALTER USER 'username'@'%' IDENTIFIED WITH mysql_native_password BY 'password'; 不重新配置MySQL，暂时先指定使用旧版本的认证方式来设置密码。待后续软件更新了自然就可以使用新版本功能了。 https://stackoverflow.com/questions/49194719/authentication-plugin-caching-sha2-password-cannot-be-loaded]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle wm_concat实现字符串分割替换]]></title>
    <url>%2Foracle-wm-concat%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2%E6%9B%BF%E6%8D%A2.html</url>
    <content type="text"><![CDATA[背景在数据库中有一个存储有权限用户的字段，通过,分割来存储了多个用户的账号。可以通过用户账号在用户表中查询出用户的姓名，现在需要将这个字段的账号转换成用户姓名在前台展示。 用户表user： id name 0001 小明 0002 小刚 需要处理的字段：0001,0002。 要求的返回结果：小明,小刚。 思路 首先我们需要把user表中id字段存在在处理字段中的值给查出来。 最开始考虑使用instr函数： 1select * from user where instr('0001,0002', id)&gt;0 instr()函数可以判断值在字符串中的位置，如果大于0，也就是存在。但是这是模糊匹配的，会有问题。比如上面场景中，如果有用户id是000那么也会匹配出来。 所以使用regexp_like()，通过正则来判断。 这里的正则表达如为：^(0001|0002)$。使用^确定开通，$确认结尾，|用来分割允许的值。对应到实际的就变成如下： 1select name from user where regexp_like(id, '^(' || replace('0001,0002', ',', '|') || ')$') 注意：很多正则判断工具里^0001|0002$也可以实现效果，但oracle中，必须加上()，否则oracle会认为是^0001 和0002$，0001001这样的也会被识别到。 输出结果： name 小明 小刚 然后可以使用wm_concat函数把连起来即可。 wm_concat是一个未被记录的函数，但是可以实现将列通过,连成一个字段的作用。 1select to_char(wmsys.wm_concat(name)) from user where id = '0001' or id = '0002' https://community.oracle.com/thread/1090158 结论连起来结果如下： 1select to_char(wmsys.wm_concat(name)) name from user where regexp_like(id, '^'|| replace('0001,0002', ',', '|')||'$') 输出结果： name 小明,小刚 注意由于wm_concat未被官方记录，不同版本的oracle有区别，如果输出是个clob类型，那么可以使用to_char()来转换。也可以考虑使用listagg()来实现。]]></content>
      <categories>
        <category>数据库</category>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle regexp_substr函数实现字符串split]]></title>
    <url>%2Foracle-regexp-substr%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2split.html</url>
    <content type="text"><![CDATA[背景数据库中有一个owner字段，里面存了多个有权限用户的账号，通过,分割。现前台返回一个用户账号，需要判断该用户是否有权限。首先要把这个字段进行分割成列，然后就可以判断是否存在。 思路 首先oracle是可以使用regexp_substr实现按照分隔符获取元素的。 1234567REGEXP_SUBSTR(source_char, pattern [, position [, occurrence [, match_parameter ] ] ] ) 其中： source_char是需要分割的字符串。 pattern为正则表达。 position是起始位置，默认为1。 occurrence是表示第几个匹配组，默认为1。 match_parameter是匹配参数： i：大小写不敏感 c：大小写敏感 n：允许(.)匹配换行符 m：oracle将把字符串当做多行字符处理，^和$是起始和结束 x：忽略空格 https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions131.htm 于是我们通过下面的表达式获取分割后的某个值： 1select regexp_substr('1,2,3', '[^,]+', 1, 2) from dual; --获取第二个数 结果如下： 现在我们需要把其中的occurrence变成一个和分割后等长的列即可。 获取分割后元素的个数 使用length()可以获取字符串的个数，而字符串是通过,分割的。使用replece()可以替换删除所有的分割符。分割后的字符串个数即是两者的差加1。 1select length('1,2,3') - length(replace('1,2,3',',')) + 1 from dual; 结果如下： 获取一个空列 可以通过level加上connect by来获取一个空列： 1select level from dual connect by level &lt;= 5; 结果如下： 把上述连起来就可以获取分割后的列了。 结论虽然有点长，但是总体思路还是比较清晰的。代码如下： 1select regexp_substr('1,2,3','[^,]+' , 1, level) from dual connect by level &lt;= (select length('1,2,3') - length(replace('1,2,3',',')) + 1 from dual); 结果如下： 最后我们需要判断某个人是否有权限，即某人的账号是否在我们获取的分割后的列里面。直接用count(1)是否大于0即可。 12345select count(1) from (select regexp_substr('1,2,3','[^,]+' , 1, level) as owner from dual connect by level &lt;= (select length('1,2,3') - length(replace('1,2,3',',')) + 1 from dual) twhere t.owner = i_owner]]></content>
      <categories>
        <category>数据库</category>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用装机及开发软件分享]]></title>
    <url>%2FMac%E5%B8%B8%E7%94%A8%E8%A3%85%E6%9C%BA%E5%8F%8A%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB.html</url>
    <content type="text"><![CDATA[其实软件也不多，主要几个专业软件和开发软件要收费，经常会有一些失效的破解和假的破解版。亲测可用，在这里记录和分享，以备万一。 办公软件 Office2019 + 激活：链接:https://pan.baidu.com/s/1YgGS6AI-XdI5vCcyfPA8OQ 密码:f2dl 专业软件 Photoshop CC2018 + 激活：链接:https://pan.baidu.com/s/1ZdPU1GkkOmYYfgvtLOwpBA 密码:zv6u Auto CAD 2018 + 激活：链接:https://pan.baidu.com/s/1IYWly6SJuGvh8l0LI33hcg 密码:2tpg typora（markdown编辑器）：https://www.typora.io/ 开发软件 PyCharm：http://www.jetbrains.com/pycharm/download/#section=mac idea：https://www.jetbrains.com/idea/download/#section=mac WebStrom：https://www.jetbrains.com/webstorm/download/download-thanks.html Navcat Premium：链接:https://pan.baidu.com/s/1egvUoYnoi21980vo38vQUw 密码:7zn6 SubLime：http://www.sublimetext.com/3 其他 Parallel Desktop（虚拟机）+ 激活：链接:https://pan.baidu.com/s/1dPfTfCDVpzXMrivbt9OUqg 密码:ztns Win10官方镜像：链接:https://pan.baidu.com/s/11iOX061WNDlt9oSpNJh6lw 密码:xn7r Win10 激活工具：链接:https://pan.baidu.com/s/1FNbLuXKG5TPW9y_hvr5YmA 密码:jn9b Keka118（压缩软件）：链接:https://pan.baidu.com/s/16Yjo44uRRPk0aZY6ugZ4qg 密码:cli2]]></content>
      <categories>
        <category>操作系统</category>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用node-schedule实现node后台定时任务]]></title>
    <url>%2F%E7%94%A8node-schedule%E5%AE%9E%E7%8E%B0node%E5%90%8E%E5%8F%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</url>
    <content type="text"><![CDATA[背景最近在自己的小程序中增加了多币种支持涉及到汇率的更新，于是需要在后台服务端设置一个定时任务来自动通过响应的接口更新最新的汇率。获取汇率的接口目前通过聚合数据提供的免费接口实现（调到需要实名注册）。 node-schedule由于小程序后端服务器是基于node，查一下，果然是有对应的npm包的——node-schedule。 node-schedule可以使用多种方式定义定时任务的，一般使用类似liunx的cron方式就可以满足绝大部分需求了。cron的定义方式参考如下表： 123456789* * * * * *┬ ┬ ┬ ┬ ┬ ┬│ │ │ │ │ ││ │ │ │ │ └ 星期 day of week (0 - 7) (0 or 7 is Sun)│ │ │ │ └───── 月 month (1 - 12)│ │ │ └────────── 日期 day of month (1 - 31)│ │ └─────────────── 小时 hour (0 - 23)│ └──────────────────── 分钟 minute (0 - 59)└───────────────────────── 秒 second (0 - 59, OPTIONAL) 如果你熟悉linux系统的crontab定时任务的话，那就相当简单了。 它还支持基于日期的定时任务以及基于rule的定时任务。详细可以见一下官方说明。 https://www.npmjs.com/package/node-schedule 实现方法首先需要安装node-schedule包，并保存在项目的package.json中。 1cnpm install node-schedule --save 我的需求是每三十分钟自动更新一次数据，那么通过cron的方式就可以定义为如下规则： 10 */30 * * * * 其中*/30是指可以被30整除的，也就是0分和30分的时候。规则确定了，那么代码就很简单了： 12345678910const schedule = require('node-schedule')function scheduleCron () &#123; schedule.scheduleJob('0 */30 * * * *', function () &#123; console.log('scheduleCron ' + new Date()) // do something &#125;)&#125;scheduleCron() 输出结果： 12scheduleCron Wed Jan 02 2019 00:00:00 GMT+0800 (CST)scheduleCron Wed Jan 02 2019 00:30:00 GMT+0800 (CST) 注意！根据官方说明node-schedule是基本上支持所有的cron表达式，除了一下几个： W：最近的工作日，放在日期(day of month)字段，比如15W指到本月15日最近的工作日。 L：表示最后，放在星期(day of month)或者星期(day of week)字段。 #：表示每月的周几，放在星期(day of week)字段。 cron拓展配置规则时几个常用的符号： *：表示匹配任意值。 /：x/y表示等步长序列，可以理解为从x开始，每y个单位执行一次。其中*/5与0/5是等效的，都是指每5分钟执行一次。 ,：表示序列的分割，比如3,4指在3和4的时候执行。 -：表示一个范围，比如3-5指在3到5的时候执行。 ?：仅用在日期和星期字段，表示任意的值，相当于占位。]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序腾讯云环境安装依赖错误]]></title>
    <url>%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%85%BE%E8%AE%AF%E4%BA%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AF.html</url>
    <content type="text"><![CDATA[背景开发工具：微信开发者工具 操作系统：Mac 腾讯云环境：Node 问题最近使用node-sechedule开发了一个后台定时任务，这个是新增的node模块，所以需要安装依赖，即在package.json中增加对应的依赖： 1234"dependencies": &#123; ... "node-schedule": "^1.3.1" &#125;, 在本地测试通过之后，点击开发工具上面的“腾讯云”-“上传测试代码” 并勾选安装依赖。问题就出现了！！！ 排查及原因 感觉这是权限问题啊，于是切换了小程序的管理员用户，点击上传，情况一样。 无奈只能先恢复开发环境了，然后再次上传。根据文档推荐，首次上传最好使用模块上传，全部勾选，结果情况还是一样。 看了node_modules文件夹中，的确有node-schedule文件夹啊，不过有一点奇怪的是，安装每个安装的npm包都有一个_开头的文件夹： 看来得找专家了，于是在腾讯云控制台上提交了一个工单，过了半个小时的样子就有工程师电话来了。他首先在自己的环境里试了一下我的package.json包，竟然没有问题。。。 工程师登录我的后台服务器看了下： 感觉可能是因为上面这种奇怪的包文件夹造成的。于是乎，再恢复一次环境，然后我再次上传，这次不再勾选“上传node_modules代码”。 这样也即是让后台服务器自动安装所有的依赖。最后，成功了！ 这时候再看一下后台服务器上目录： 没有了那种_开头的目录，就成功了。 插曲有了上面的经验，本以为上传到生产环境就妥妥的了。结果点击“上传正式代码”之后，坑爹了。 正式代码上传是没有上面的这种选项的，本机上的那些_开头的node_modules文件也上传了，再一次入坑。 于是乎，只能再次联系腾讯云的工程师，删除了我工程的node_modules文件夹，然后点击控制台上的安装依赖。待依赖安装完成后，再次部署代码。 这时候后端启动已经没有问题，但是小程序竟然无法直接访问，最后发现是由于小程序解决方案里本来是自带ssl证书的，这个证书最近到期了，需要自己购买新的证书（选免费的）联系后台更新。 至此问题彻底解决。 结论可以看出，主要问题还是在于node_modules里文件的问题。而这个的罪魁祸首是——cnpm。 可以参考如下的issue，cnpm安装包时采用link的方式，与npm不一样。 https://github.com/cnpm/cnpmjs.org/issues/1000 在小程序上传之后自动安装包，则用的是npm安装，从而导致问题出现。以后在没弄明白之前还是先用原生的吧，在别人给你便利的时候，也要明白其中有什么道理。 另外，建议自己在本地开发的时候，server目录下还是把node_modules给删除了，以免后续一不小心又上传了什么问题文件。]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>node</tag>
        <tag>javascript</tag>
        <tag>腾讯云</tag>
        <tag>微信开发者工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Gulp实现Hexo网页压缩优化]]></title>
    <url>%2F%E7%94%A8Gulp%E5%AE%9E%E7%8E%B0Hexo%E7%BD%91%E9%A1%B5%E5%8E%8B%E7%BC%A9%E4%BC%98%E5%8C%96.html</url>
    <content type="text"><![CDATA[背景经过一段时间的折腾，也算是把这个Hexo的个人博客搭建起来了，换主题，加插件，文章里加图片是什么的，就发现网站有时候会有点慢，于是开始考虑做SEO以及一些优化工作，于是乎发现了Gulp这个神器。 Gulp是什么Hexo生成的静态网页其实是可读性比较好的，会有大量的空格、换行什么的，而实际浏览器解析式完全不需要的。如果把这些空格、换行全部删掉，就会节省很多空间出来，于是网站的响应速度也就变快了。 而Gulp是一种基于node的自动化构建工具，至于自动化构建这个我们目前不需要纠结，我们只要知道它有一些插件可以帮助我们自动化的对hexo生成的各种文件进行压缩。 Gulp怎么用 首先我们要在全局安装下gulp和我们要用到的插件 12npm install gulp -gnpm install gulp gulp-uglify gulp-minify-css gulp-imagemin gulp-htmlmin gulp-htmlclean gulp-concat --save 在hexo的根目录创建一个gulpfile.js文件 先放代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162var gulp = require('gulp'), uglify = require('gulp-uglify'), cssmin = require('gulp-minify-css'), imagemin = require('gulp-imagemin'), htmlmin = require('gulp-htmlmin'), htmlclean = require('gulp-htmlclean'); concat = require('gulp-concat');//JS压缩gulp.task('uglify', function() &#123; return gulp.src(['./public/js/**/.js','!./public/js/**/*min.js'])//只是排除min.js文件还是不严谨，一般不会有问题，根据自己博客的修改我的修改为return gulp.src(['./public/**/*.js','!./public/zuoxi/**/*.js',,'!./public/radio/**/*.js']) .pipe(uglify()) .pipe(gulp.dest('./public/js'));//对应修改为./public即可&#125;);//public-fancybox-js压缩gulp.task('fancybox:js', function() &#123; return gulp.src('./public/vendors/fancybox/source/jquery.fancybox.js') .pipe(uglify()) .pipe(gulp.dest('./public/vendors/fancybox/source/'));&#125;);// 合并 JSgulp.task('jsall', function () &#123; return gulp.src('./public/**/*.js') // 压缩后重命名 .pipe(concat('app.js')) .pipe(gulp.dest('./public'));&#125;);//public-fancybox-css压缩gulp.task('fancybox:css', function() &#123; return gulp.src('./public/vendors/fancybox/source/jquery.fancybox.css') .pipe(cssmin()) .pipe(gulp.dest('./public/vendors/fancybox/source/'));&#125;);//CSS压缩gulp.task('cssmin', function() &#123; return gulp.src(['./public/css/main.css','!./public/css/*min.css']) .pipe(cssmin()) .pipe(gulp.dest('./public/css/'));&#125;);//图片压缩gulp.task('images', function() &#123; gulp.src('./public/uploads/*.*') .pipe(imagemin(&#123; progressive: false &#125;)) .pipe(gulp.dest('./public/uploads/'));&#125;);// 压缩 public 目录 html文件 public/**/*.hmtl 表示public下所有文件夹中html，包括当前目录gulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// gulp.task('default', gulp.series('uglify', 'cssmin', 'fancybox:js', 'fancybox:css', 'jsall','images'));gulp.task('default', gulp.series('uglify', 'cssmin', 'jsall', 'minify-html'));//, 'minify-html' 这里要注意的是，默认安装的是gulp 4.0.0，而网上很多例子是基于gulp 3的，所以运行起来 会有如下的报错： 123456789101112131415assert.js:351 throw err; ^AssertionError [ERR_ASSERTION]: Task function must be specified at Gulp.set [as _setTask] (/Users/zhengk/Desktop/hexo/blog/node_modules/_undertaker@1.2.0@undertaker/lib/set-task.js:10:3) at Gulp.task (/Users/zhengk/Desktop/hexo/blog/node_modules/_undertaker@1.2.0@undertaker/lib/task.js:13:8) at Object.&lt;anonymous&gt; (/Users/zhengk/Desktop/hexo/blog/gulpfile.js:59:6) at Module._compile (internal/modules/cjs/loader.js:721:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10) at Module.load (internal/modules/cjs/loader.js:620:32) at tryModuleLoad (internal/modules/cjs/loader.js:560:12) at Function.Module._load (internal/modules/cjs/loader.js:552:3) at Module.require (internal/modules/cjs/loader.js:657:17) at require (internal/modules/cjs/helpers.js:22:18) 这是由于gulp4中需要使用gulp.series 和 gulp.parallel来指定运行的任务。具体见上面gulpfile.js中的最后一行。 1gulp.task('default', gulp.series('uglify', 'cssmin', 'jsall', 'minify-html')); https://blog.csdn.net/qq_31975963/article/details/83034450 这一行是写明gulp需要执行的任务，然后需要注意的是，当其中某个任务失败或者没有东西需要压缩的时候，比如你没有用到fancybox却要执行fancybox:js任务，就会有如下的报错： 1234567891011121314151617181920[23:59:25] Using gulpfile ~/Desktop/hexo/blog/gulpfile.js[23:59:25] Starting 'default'...[23:59:25] Starting 'uglify'...[23:59:25] Finished 'uglify' after 24 ms[23:59:25] Starting 'cssmin'...[23:59:26] Finished 'cssmin' after 215 ms[23:59:26] Starting 'fancybox:js'...[23:59:26] 'fancybox:js' errored after 2.96 ms[23:59:26] Error: File not found with singular glob: /Users/zhengk/Desktop/hexo/blog/public/vendors/fancybox/source/jquery.fancybox.js (if this was purposeful, use `allowEmpty` option) at Glob.&lt;anonymous&gt; (/Users/zhengk/Desktop/hexo/blog/node_modules/_glob-stream@6.1.0@glob-stream/readable.js:84:17) at Object.onceWrapper (events.js:277:13) at Glob.emit (events.js:189:13) at Glob.EventEmitter.emit (domain.js:441:20) at Glob._finish (/Users/zhengk/Desktop/hexo/blog/node_modules/_glob@7.1.3@glob/glob.js:197:8) at done (/Users/zhengk/Desktop/hexo/blog/node_modules/_glob@7.1.3@glob/glob.js:182:14) at Glob._processSimple2 (/Users/zhengk/Desktop/hexo/blog/node_modules/_glob@7.1.3@glob/glob.js:688:12) at /Users/zhengk/Desktop/hexo/blog/node_modules/_glob@7.1.3@glob/glob.js:676:10 at Glob._stat2 (/Users/zhengk/Desktop/hexo/blog/node_modules/_glob@7.1.3@glob/glob.js:772:12) at lstatcb_ (/Users/zhengk/Desktop/hexo/blog/node_modules/_glob@7.1.3@glob/glob.js:764:12)[23:59:26] 'default' errored after 246 ms 只要把对应的任务删掉就好了。 运行gult 先执行hexo g来生成静态网页，然后我们看下public文件夹下的静态文件大小： 1234$ls -lh...-rw-r--r-- 1 zhengk staff 57K 12 30 00:07 index.html... 然后我们再执行下gulp（执行时默认执行default任务，所以前面gulpfile.js中设置任务为default）对比下效果： 1234567891011121314151617$gulp[00:53:29] Working directory changed to ~/Desktop/hexo/blog[00:53:30] Using gulpfile ~/Desktop/hexo/blog/gulpfile.js[00:53:30] Starting 'default'...[00:53:30] Starting 'uglify'...[00:53:30] Finished 'uglify' after 23 ms[00:53:30] Starting 'cssmin'...[00:53:30] Finished 'cssmin' after 216 ms[00:53:30] Starting 'jsall'...[00:53:30] Finished 'jsall' after 56 ms[00:53:30] Starting 'minify-html'...[00:53:31] Finished 'minify-html' after 1.16 s[00:53:31] Finished 'default' after 1.46 s$ls -lh...-rw-r--r-- 1 zhengk staff 27K 12 30 00:07 hello-world.html... 可以发现足足小了30k，压缩了近一半大小。]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>hexo</tag>
        <tag>gulp</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的Json、Map、Set]]></title>
    <url>%2FJavaScript%E4%B8%AD%E7%9A%84Json%E3%80%81Map%E3%80%81Set.html</url>
    <content type="text"><![CDATA[问题之前在一个项目中，需要根据申请的部门来获取对应的邮箱地址，想当然的使用了Map对象，结果在调试中完全没有问题，却在实际使用上失效了，查看了下后台log，提示获取到的邮箱地址是undefined。 排查及原因经过百度之后发现原来JS的Map对象的浏览器支持不好，虽然很多地方写IE11开始支持，但其实IE11是不支持new Map()这种方式新建的。 详见如下链接：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#浏览器兼容 于是我把换成了用Json对象，果然就解决了。 所以尽量还是用Json吧。 总结Map对象JS的Map存放的是键值对，key值不允许重复。特别要注意的是在一些旧的浏览器中并不支持Map对象。 基本使用 12345678910111213141516171819202122// 新建Map对象&gt; m = new Map()Map &#123;&#125;// 新增Map键值对&gt; m.set('key1','value1')Map &#123; 'key1' =&gt; 'value1' &#125;// 获取Map中的key值&gt; m.get('key1')'value1'// 判断是否存在某key&gt; m.has('key1')true&gt; m.set('key2','value2')Map &#123; 'key1' =&gt; 'value1', 'key2' =&gt; 'value2' &#125;// 删除某键值对&gt; m.delete('key1')true&gt; mMap &#123; 'key2' =&gt; 'value2' &#125;// 清空Map对象&gt; m.clear()undefined 遍历 12345678910&gt; m.set('key1','value1')Map &#123; 'key1' =&gt; 'value1' &#125;&gt; m.set('key2','value2')Map &#123; 'key1' =&gt; 'value1', 'key2' =&gt; 'value2' &#125;&gt; m.forEach(function (value, key, map) &#123;... console.log(key + ":" + value)... &#125;)key1:value1key2:value2undefined Set对象Set对象可以理解为没有值的Map对象，一般用于存放一个不允许重复的列表 基本使用 123456789101112131415161718// 新建Set对象&gt; s = new Set()Set &#123;&#125;// 新增Set值&gt; s.add('key1')Set &#123; 'key1' &#125;&gt; s.add('key2')Set &#123; 'key1', 'key2' &#125;// 删除某值&gt; s.delete('key1')true&gt; sSet &#123; 'key2' &#125;// 清空Set对象&gt; s.clear()undefined&gt; sSet &#123;&#125; 遍历 Set对象的礼遍历和Map基本一样，但是由于Set对象没有value值，所以遍历的时候key和value是一样的。 12345678910&gt; s.add('key1')Set &#123; 'key1' &#125;&gt; s.add('key2')Set &#123; 'key1', 'key2' &#125;&gt; s.forEach(function (value, key, set) &#123;... console.log(key + ":" + value)... &#125;)key1:key1key2:key2undefined Json对象 基本使用 123456\\ 新建Json对象&gt; let currencyItems = &#123; '人民币': 1, '港币': 0.88, '澳门元': 0.86, '新台币': 0.2241, '美元': 6.905, '日元': 0.06, '英镑': 8.69, '欧元': 7.8, '韩元': 0.006, '泰铢': 0.21, '新西兰元': 4.69, '澳大利亚元': 4.96, '菲律宾比索': 0.13, '加拿大元': 5.16, '瑞士法郎': 6.92, '瑞典克朗': 0.76, '丹麦克朗': 1.05, '挪威克朗': 0.8 &#125;undefined\\ 获取Json对象某值&gt; currencyItems['人民币']1 获取Json对象的所有Key值 12345678910111213141516171819&gt; Object.keys(currencyItems)[ '人民币', '港币', '澳门元', '新台币', '美元', '日元', '英镑', '欧元', '韩元', '泰铢', '新西兰元', '澳大利亚元', '菲律宾比索', '加拿大元', '瑞士法郎', '瑞典克朗', '丹麦克朗', '挪威克朗' ] 获取Json对象的长度 12&gt; Object.keys(currencyItems).length18 遍历 12345678910111213141516171819202122&gt; for ( var i in currencyItems) &#123;... console.log(i + ":" + currencyItems[i])... &#125;人民币:1港币:0.88澳门元:0.86新台币:0.2241美元:6.905日元:0.06英镑:8.69欧元:7.8韩元:0.006泰铢:0.21新西兰元:4.69澳大利亚元:4.96菲律宾比索:0.13加拿大元:5.16瑞士法郎:6.92瑞典克朗:0.76丹麦克朗:1.05挪威克朗:0.8undefined]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Json</tag>
        <tag>Map</tag>
        <tag>Set</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Server 2018 TCP 连接数限制问题]]></title>
    <url>%2FWindows-Server-2018-TCP-%E8%BF%9E%E6%8E%A5%E6%95%B0%E9%99%90%E5%88%B6%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[背景最近在查一个并发问题，在压测的时候，Nginx的error.log显示connect() failed(111: Connection refused)。而后端应用并未手工设置过拒绝连接。于是怀疑是在高并发的情况下，windows服务器可能存在自行拒绝连接的情况。 排查过程首先打开windows服务器上的 任务管理器 - 性能 - 资源监控器。TCP连接这儿显示总数为100。 然后开启压测，TCP连接开始飙升，然后问题出现了。 TCP连接满了，怎么就变成10了！不过瓶颈应该就是这儿了！ 结论经过各种百度，谷歌，发现我好像被误导了。 微软官方说从Windows Vista，Window server 2008 SP2 起，不在限制half-open TCP connections，也就是理论上不再有连接数的限制。 官方说明见这个地址：https://support.microsoft.com/zh-cn/help/969710/how-to-enable-the-half-open-tcp-connections-limit-in-windows-vista-wit 然后根据国外有个问答网站的结论，这个“10”，“100”这个显示应该是个Bug，并不是一共就10个或者100个。 可参考如下这个解释： https://serverfault.com/questions/448589/increasing-of-max-more-than-10-tcp-connections 那么怎么看确定的连接数呢？ 在 开始 - 运行 中输入 perfmon.exe打开性能监视器，然后添加TCPv4的计数器。 这里就可以看到当前的实际连接数了，图里当前最新连接数是“824“，远超前面显示的”10“或者”100“。 看来一不小心又碰到坑了。 那么最开始要查的Connection refused到底是什么原因呢，还得继续努力了。。。]]></content>
      <categories>
        <category>操作系统</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取当当网的书籍分类目录]]></title>
    <url>%2F%E8%8E%B7%E5%8F%96%E5%BD%93%E5%BD%93%E7%BD%91%E7%9A%84%E4%B9%A6%E7%B1%8D%E5%88%86%E7%B1%BB%E7%9B%AE%E5%BD%95.html</url>
    <content type="text"><![CDATA[背景之前单位新建了一个小图书馆，然后就有了这么一个需求，需要设置一下图书的分类与目录。要怎么定义呢，当然是百度咯。然后想到了卖书发家的当当网，打算把当当网上的所有图书分类全部抓下来提供给行政来作参考。 思路打开当当网的图书页面http://book.dangdang.com/，图书分类就在网页的左边，开启F12看源代码。 多看看就看出来规律了，关注红框部分。所有的分类其实都在&lt;a&gt;标签里，其中的href属性里的网址很有规律，去掉前面的域名之后，都以cp + 数字来命名，其中数字与数字之间用.来分割，代表一级目录和二级目录。 所以大体思路就是通过正则表达式先抓取href属性中含有cp开头的元素，然后找出所有第一节数字不同的元素，获取其text属性来当一级目录，然后把域名+cp+一级目录序号当做固定前缀来找对应的二级目录。 要注意就是去重还有一些删除一些网址不符合这个过滤的，以及所有的text记得用strip()来删除一下多余的空格和换行符号。 具体实现按上面的思路，主要用requests bs4就差不多了，详细代码就参考github吧，https://github.com/keejo125/ 有更好的方法的也欢迎分享。]]></content>
      <categories>
        <category>python</category>
        <category>网络爬虫与数据分析</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开启又关闭icloud云盘，我的桌面文件去哪里了！]]></title>
    <url>%2F%E5%BC%80%E5%90%AF%E5%8F%88%E5%85%B3%E9%97%ADicloud%E4%BA%91%E7%9B%98%EF%BC%8C%E6%88%91%E7%9A%84%E6%A1%8C%E9%9D%A2%E6%96%87%E4%BB%B6%E5%8E%BB%E5%93%AA%E9%87%8C%E4%BA%86%EF%BC%81.html</url>
    <content type="text"><![CDATA[最近更换笔记本，又不想直接通过时间胶囊设置新mac，于是乎在整理好旧资料之后，准备拷贝到新电脑时发现了iCloud云盘这个东西，可以自动备份桌面和文稿的内容到iCloud，那么在新电脑中再通过iCloud下载就好了，完美！ 结果，高估了iCloud的效果，开启之后，mac会上传桌面和文稿，速度超级慢，然后mac风扇呼呼的转，果断放弃，关闭了iCloud云盘。 关闭也很慢，卡了一会儿，提示 慢的不行，反正也没上传多少东西，于是就点了“停止更新并关闭” 然后就问题出现了！！！ 桌面空空如也，我的东西呢！！！ 在翻翻iCloud云盘，只有已经上传了的那一丢丢！！！ 急中生智，赶紧百度，翻了好结果贴，结论如下： 其实前面已经提示了，文件都能被放在了一个叫做 “iCloud云盘（归档）”中了。路径如下：/User/xxx/中。 真是虚惊一场，看到网上好多碰到一样问题的，好多人以为就没有了。 特地记录一下。]]></content>
      <categories>
        <category>操作系统</category>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>iCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于这个”博客“]]></title>
    <url>%2F%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E2%80%9D%E5%8D%9A%E5%AE%A2%E2%80%9C.html</url>
    <content type="text"><![CDATA[最初是在腾讯的云开发者平台上知道的hexo，好像很方便的样子，又很Geek的样子，于是打算尝试一下。 后来发现hexo作为博客的话，缺少了很大一部分功能——评论。 虽然可以使用第三方插件，但总觉得有点怪怪的。 于是乎，我打算把这里作为记录自己日常知识积累，或是感悟的地方。所以在标题中用了有引号的”博客“。 把每次百度或是谷歌出来的答案都记下来，希望不会再搜第二次。 感觉上好像有点跌跌撞撞，但方向是往前不就好了么，是吧]]></content>
      <categories>
        <category>生活随笔</category>
        <category>感悟</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[这是一个新的开始。 马东说：我的底色的悲凉的。 蔡康永说：只有底色悲凉的乐观，才是真的乐观啊。 乐观起来，哪怕人间不值得。]]></content>
      <categories>
        <category>生活随笔</category>
        <category>感悟</category>
      </categories>
  </entry>
</search>
